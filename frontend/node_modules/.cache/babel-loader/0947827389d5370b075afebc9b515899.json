{"ast":null,"code":"// import React from \"react\";\n// import { connect } from \"react-redux\";\n// import WebSocketInstance from \"../websocket\";\n// import Hoc from \"../hoc/hoc\";\n// class Chat extends React.Component {\n//   state = { message: \"\" };\n//   initialiseChat() {\n//     this.waitForSocketConnection(() => {\n//       WebSocketInstance.fetchMessages(\n//         this.props.username,\n//         this.props.match.params.chatID\n//       );\n//     });\n//     WebSocketInstance.connect(this.props.match.params.chatID);\n//   }\n//   constructor(props) {\n//     super(props);\n//     this.initialiseChat();\n//   }\n//   waitForSocketConnection(callback) {\n//     const component = this;\n//     setTimeout(function() {\n//       if (WebSocketInstance.state() === 1) {\n//         console.log(\"Connection is made\");\n//         callback();\n//         return;\n//       } else {\n//         console.log(\"wait for connection...\");\n//         component.waitForSocketConnection(callback);\n//       }\n//     }, 100);\n//   }\n//   messageChangeHandler = event => {\n//     this.setState({ message: event.target.value });\n//   };\n//   sendMessageHandler = e => {\n//     e.preventDefault();\n//     const messageObject = {\n//       from: this.props.username,\n//       content: this.state.message,\n//       chatId: this.props.match.params.chatID\n//     };\n//     WebSocketInstance.newChatMessage(messageObject);\n//     this.setState({ message: \"\" });\n//   };\n//   renderTimestamp = timestamp => {\n//     let prefix = \"\";\n//     const timeDiff = Math.round(\n//       (new Date().getTime() - new Date(timestamp).getTime()) / 60000\n//     );\n//     if (timeDiff < 1) {\n//       // less than one minute ago\n//       prefix = \"just now...\";\n//     } else if (timeDiff < 60 && timeDiff > 1) {\n//       // less than sixty minutes ago\n//       prefix = `${timeDiff} minutes ago`;\n//     } else if (timeDiff < 24 * 60 && timeDiff > 60) {\n//       // less than 24 hours ago\n//       prefix = `${Math.round(timeDiff / 60)} hours ago`;\n//     } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\n//       // less than 7 days ago\n//       prefix = `${Math.round(timeDiff / (60 * 24))} days ago`;\n//     } else {\n//       prefix = `${new Date(timestamp)}`;\n//     }\n//     return prefix;\n//   };\n//   renderMessages = messages => {\n//     const currentUser = this.props.username;\n//     return messages.map((message, i, arr) => (\n//       <li\n//         key={message.id}\n//         style={{ marginBottom: arr.length - 1 === i ? \"300px\" : \"15px\" }}\n//         className={message.author === currentUser ? \"sent\" : \"replies\"}\n//       >\n//         <img\n//           src=\"http://emilcarlsson.se/assets/mikeross.png\"\n//           alt=\"profile-pic\"\n//         />\n//         <p>\n//           {message.content}\n//           <br />\n//           <small>{this.renderTimestamp(message.timestamp)}</small>\n//         </p>\n//       </li>\n//     ));\n//   };\n//   scrollToBottom = () => {\n//     this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n//   };\n//   componentDidMount() {\n//     this.scrollToBottom();\n//   }\n//   componentDidUpdate() {\n//     this.scrollToBottom();\n//   }\n//   componentWillReceiveProps(newProps) {\n//     if (this.props.match.params.chatID !== newProps.match.params.chatID) {\n//       WebSocketInstance.disconnect();\n//       this.waitForSocketConnection(() => {\n//         WebSocketInstance.fetchMessages(\n//           this.props.username,\n//           newProps.match.params.chatID\n//         );\n//       });\n//       WebSocketInstance.connect(newProps.match.params.chatID);\n//     }\n//   }\n//   render() {\n//     return (\n//       <Hoc>\n//         <div className=\"messages\">\n//           <ul id=\"chat-log\">\n//             {this.props.messages && this.renderMessages(this.props.messages)}\n//             <div\n//               style={{ float: \"left\", clear: \"both\" }}\n//               ref={el => {\n//                 this.messagesEnd = el;\n//               }}\n//             />\n//           </ul>\n//         </div>\n//         <div className=\"message-input\">\n//           <form onSubmit={this.sendMessageHandler}>\n//             <div className=\"wrap\">\n//               <input\n//                 onChange={this.messageChangeHandler}\n//                 value={this.state.message}\n//                 required\n//                 id=\"chat-message-input\"\n//                 type=\"text\"\n//                 placeholder=\"Write your message...\"\n//               />\n//               <i className=\"fa fa-paperclip attachment\" aria-hidden=\"true\" />\n//               <button id=\"chat-message-submit\" className=\"submit\">\n//                 <i className=\"fa fa-paper-plane\" aria-hidden=\"true\" />\n//               </button>\n//             </div>\n//           </form>\n//         </div>\n//       </Hoc>\n//     );\n//   }\n// }\n// const mapStateToProps = state => {\n//   return {\n//     username: state.auth.username,\n//     messages: state.message.messages\n//   };\n// };\n// export default connect(mapStateToProps)(Chat);","map":{"version":3,"sources":["D:/VSCode/SessionAuth/ChatApp/frontend/src/containers/Chat.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from \"react\";\r\n// import { connect } from \"react-redux\";\r\n// import WebSocketInstance from \"../websocket\";\r\n// import Hoc from \"../hoc/hoc\";\r\n\r\n// class Chat extends React.Component {\r\n//   state = { message: \"\" };\r\n\r\n//   initialiseChat() {\r\n//     this.waitForSocketConnection(() => {\r\n//       WebSocketInstance.fetchMessages(\r\n//         this.props.username,\r\n//         this.props.match.params.chatID\r\n//       );\r\n//     });\r\n//     WebSocketInstance.connect(this.props.match.params.chatID);\r\n//   }\r\n\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.initialiseChat();\r\n//   }\r\n\r\n//   waitForSocketConnection(callback) {\r\n//     const component = this;\r\n//     setTimeout(function() {\r\n//       if (WebSocketInstance.state() === 1) {\r\n//         console.log(\"Connection is made\");\r\n//         callback();\r\n//         return;\r\n//       } else {\r\n//         console.log(\"wait for connection...\");\r\n//         component.waitForSocketConnection(callback);\r\n//       }\r\n//     }, 100);\r\n//   }\r\n\r\n//   messageChangeHandler = event => {\r\n//     this.setState({ message: event.target.value });\r\n//   };\r\n\r\n//   sendMessageHandler = e => {\r\n//     e.preventDefault();\r\n//     const messageObject = {\r\n//       from: this.props.username,\r\n//       content: this.state.message,\r\n//       chatId: this.props.match.params.chatID\r\n//     };\r\n//     WebSocketInstance.newChatMessage(messageObject);\r\n//     this.setState({ message: \"\" });\r\n//   };\r\n\r\n//   renderTimestamp = timestamp => {\r\n//     let prefix = \"\";\r\n//     const timeDiff = Math.round(\r\n//       (new Date().getTime() - new Date(timestamp).getTime()) / 60000\r\n//     );\r\n//     if (timeDiff < 1) {\r\n//       // less than one minute ago\r\n//       prefix = \"just now...\";\r\n//     } else if (timeDiff < 60 && timeDiff > 1) {\r\n//       // less than sixty minutes ago\r\n//       prefix = `${timeDiff} minutes ago`;\r\n//     } else if (timeDiff < 24 * 60 && timeDiff > 60) {\r\n//       // less than 24 hours ago\r\n//       prefix = `${Math.round(timeDiff / 60)} hours ago`;\r\n//     } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\r\n//       // less than 7 days ago\r\n//       prefix = `${Math.round(timeDiff / (60 * 24))} days ago`;\r\n//     } else {\r\n//       prefix = `${new Date(timestamp)}`;\r\n//     }\r\n//     return prefix;\r\n//   };\r\n\r\n//   renderMessages = messages => {\r\n//     const currentUser = this.props.username;\r\n//     return messages.map((message, i, arr) => (\r\n//       <li\r\n//         key={message.id}\r\n//         style={{ marginBottom: arr.length - 1 === i ? \"300px\" : \"15px\" }}\r\n//         className={message.author === currentUser ? \"sent\" : \"replies\"}\r\n//       >\r\n//         <img\r\n//           src=\"http://emilcarlsson.se/assets/mikeross.png\"\r\n//           alt=\"profile-pic\"\r\n//         />\r\n//         <p>\r\n//           {message.content}\r\n//           <br />\r\n//           <small>{this.renderTimestamp(message.timestamp)}</small>\r\n//         </p>\r\n//       </li>\r\n//     ));\r\n//   };\r\n\r\n//   scrollToBottom = () => {\r\n//     this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.scrollToBottom();\r\n//   }\r\n\r\n//   componentDidUpdate() {\r\n//     this.scrollToBottom();\r\n//   }\r\n\r\n//   componentWillReceiveProps(newProps) {\r\n//     if (this.props.match.params.chatID !== newProps.match.params.chatID) {\r\n//       WebSocketInstance.disconnect();\r\n//       this.waitForSocketConnection(() => {\r\n//         WebSocketInstance.fetchMessages(\r\n//           this.props.username,\r\n//           newProps.match.params.chatID\r\n//         );\r\n//       });\r\n//       WebSocketInstance.connect(newProps.match.params.chatID);\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <Hoc>\r\n//         <div className=\"messages\">\r\n//           <ul id=\"chat-log\">\r\n//             {this.props.messages && this.renderMessages(this.props.messages)}\r\n//             <div\r\n//               style={{ float: \"left\", clear: \"both\" }}\r\n//               ref={el => {\r\n//                 this.messagesEnd = el;\r\n//               }}\r\n//             />\r\n//           </ul>\r\n//         </div>\r\n//         <div className=\"message-input\">\r\n//           <form onSubmit={this.sendMessageHandler}>\r\n//             <div className=\"wrap\">\r\n//               <input\r\n//                 onChange={this.messageChangeHandler}\r\n//                 value={this.state.message}\r\n//                 required\r\n//                 id=\"chat-message-input\"\r\n//                 type=\"text\"\r\n//                 placeholder=\"Write your message...\"\r\n//               />\r\n//               <i className=\"fa fa-paperclip attachment\" aria-hidden=\"true\" />\r\n//               <button id=\"chat-message-submit\" className=\"submit\">\r\n//                 <i className=\"fa fa-paper-plane\" aria-hidden=\"true\" />\r\n//               </button>\r\n//             </div>\r\n//           </form>\r\n//         </div>\r\n//       </Hoc>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     username: state.auth.username,\r\n//     messages: state.message.messages\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps)(Chat);\r\n"]},"metadata":{},"sourceType":"module"}