{"ast":null,"code":"import _toConsumableArray from\"D:/VSCode/SessionAuth/ChatApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"D:/VSCode/SessionAuth/ChatApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useState,useEffect}from'react';import{NavLink}from'react-router-dom';import{useLocation}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var count=1;console.log(count);export default function ChatUI(_ref){var title=_ref.title,onDelete=_ref.onDelete,params=_ref.params;count++;console.log(\"Count : \",count);// To access props from react routers useLocation hook is used\nvar location=useLocation(null);console.log(\"PARAMS : \",location.params);var _useState=useState(location.params),_useState2=_slicedToArray(_useState,2),friendGroup=_useState2[0],setfriendGroup=_useState2[1];//*************************************************************** */\n//*******WEB SOCKETS********************************************* */\nvar roomName=friendGroup.connectionid;/****/ //\n// class LoadOldMessagesStatus {\n//     static loaded = false\n//     static loadmsgcount = 1\n//     static loadValue() {\n//         return this.loaded;\n//     }\n// }\n// let sender = friendGroup.username;\n/**/var chatSocket=new WebSocket('ws://'+window.location.host+'/ws/chat/'+roomName+'/');var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),chatmessages=_useState4[0],setchatmessages=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),textVal=_useState6[0],settextVal=_useState6[1];var onChange=function onChange(e){settextVal(e.target.value);console.log(e.target.value);};chatSocket.onmessage=function(e){var data=JSON.parse(e.data);// console.log(data)\n// if(data.messagestamp == 'new' || (data.messagestamp == 'old' && !LoadOldMessagesStatus.loadValue())) {\nsetchatmessages(function(chatmessages){return[].concat(_toConsumableArray(chatmessages),[data]);});// if(data.sender === sender)\n// document.querySelector('#chat-log').value += ('\\t\\t\\t'+data.message+'\\n')\n// else    \n//document.querySelector('#chat-log').value += (data.message + '\\n');\n// if (data.messagestamp == 'old') {\n//     LoadOldMessagesStatus.loadmsgcount = data.messagecount\n//     if (LoadOldMessagesStatus.loadmsgcount == 1){\n//         LoadOldMessagesStatus.loaded = true;\n//     }\n// }    \n// }\n};console.log(chatmessages);chatSocket.onclose=function(e){console.error('Chat socket closed unexpectedly');};// document.querySelector('#chat-message-input').focus();\n// document.querySelector('#chat-message-input').onkeyup = function(e) {\n//     if (e.keyCode === 13) {  // enter, return\n//         document.querySelector('#chat-message-submit').click();\n//     }\n// };\nvar onClick=function onClick(e){var message=e.target.value;var sender=friendGroup.username;chatSocket.send(JSON.stringify({'message':message,'sender':sender}));settextVal(\"\");// document.querySelector(\"#chat-message-sender\").value = \"\";\n};//*/*//////////////////////////////////////////////////////////////\n//**************************************************************** */\nreturn/*#__PURE__*/_jsx(Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container-fluid p-2\",children:[/*#__PURE__*/_jsx(\"nav\",{class:\"navbar navbar-dark bg-primary\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"container-fluid\",children:[/*#__PURE__*/_jsx(NavLink,{className:\"btn btn-light\",exact:true,to:\"/friends\",children:\"Back\"}),/*#__PURE__*/_jsx(\"h3\",{children:friendGroup.friend})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"overflow-auto\",children:chatmessages.length!==0?chatmessages.map(function(message){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{class:\"card\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"card-body\",children:[/*#__PURE__*/_jsx(\"h5\",{class:\"card-title\",children:message.sender}),/*#__PURE__*/_jsx(\"p\",{class:\"card-text\",children:message.message})]})})});}):\"No Messages\"}),/*#__PURE__*/_jsx(\"nav\",{class:\"navbar fixed-bottom navbar-light bg-light\",children:/*#__PURE__*/_jsx(\"div\",{class:\"container-fluid\",children:/*#__PURE__*/_jsxs(\"form\",{action:\"\",onSubmit:function onSubmit(e){onClick(e);},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"chat-message-submit\",className:\"form-control w-50 mx-auto\"}),/*#__PURE__*/_jsx(\"a\",{class:\"btn btn-success mx-auto\",type:\"submit\",href:\"#\",children:\"Send\"})]})})})]})});}","map":{"version":3,"sources":["D:/VSCode/SessionAuth/ChatApp/frontend/src/containers/Chat.js"],"names":["React","Fragment","useState","useEffect","NavLink","useLocation","count","console","log","ChatUI","title","onDelete","params","location","friendGroup","setfriendGroup","roomName","connectionid","chatSocket","WebSocket","window","host","chatmessages","setchatmessages","textVal","settextVal","onChange","e","target","value","onmessage","data","JSON","parse","onclose","error","onClick","message","sender","username","send","stringify","friend","length","map"],"mappings":"kUAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,QAA1B,CAAoCC,SAApC,KAAqD,OAArD,CACA,OAASC,OAAT,KAAwB,kBAAxB,CACA,OAASC,WAAT,KAA4B,kBAA5B,C,6IACA,GAAIC,CAAAA,KAAK,CAAG,CAAZ,CACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,cAAe,SAASG,CAAAA,MAAT,MAA6C,IAA3BC,CAAAA,KAA2B,MAA3BA,KAA2B,CAApBC,QAAoB,MAApBA,QAAoB,CAAVC,MAAU,MAAVA,MAAU,CACxDN,KAAK,GACLC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAuBF,KAAvB,EACA;AACA,GAAMO,CAAAA,QAAQ,CAAGR,WAAW,CAAC,IAAD,CAA5B,CACAE,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBK,QAAQ,CAACD,MAAlC,EACA,cAAsCV,QAAQ,CAACW,QAAQ,CAACD,MAAV,CAA9C,wCAAOE,WAAP,eAAoBC,cAApB,eACA;AAEA;AAGA,GAAMC,CAAAA,QAAQ,CAAGF,WAAW,CAACG,YAA7B,CACA,MAbwD,CAalD;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,IACA,GAAIC,CAAAA,UAAU,CAAG,GAAIC,CAAAA,SAAJ,CACb,QACEC,MAAM,CAACP,QAAP,CAAgBQ,IADlB,CAEE,WAFF,CAGEL,QAHF,CAIE,GALW,CAAjB,CAUA,eAAwCd,QAAQ,CAAC,EAAD,CAAhD,yCAAOoB,YAAP,eAAqBC,eAArB,eAEA,eAA8BrB,QAAQ,CAAC,EAAD,CAAtC,yCAAOsB,OAAP,eAAgBC,UAAhB,eAGA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,CAAD,CAAO,CACpBF,UAAU,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV,CACAtB,OAAO,CAACC,GAAR,CAAYmB,CAAC,CAACC,MAAF,CAASC,KAArB,EACH,CAHD,CAMAX,UAAU,CAACY,SAAX,CAAwB,SAACH,CAAD,CAAM,CAC1B,GAAMI,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWN,CAAC,CAACI,IAAb,CAAb,CACA;AACA;AACAR,eAAe,CAAC,SAACD,YAAD,qCAAoBA,YAApB,GAAiCS,IAAjC,IAAD,CAAf,CACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH,CAlBD,CAmBAxB,OAAO,CAACC,GAAR,CAAYc,YAAZ,EAEAJ,UAAU,CAACgB,OAAX,CAAqB,SAACP,CAAD,CAAM,CACvBpB,OAAO,CAAC4B,KAAR,CAAc,iCAAd,EACH,CAFD,CAIA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,OAAO,CAAI,QAAXA,CAAAA,OAAW,CAACT,CAAD,CAAM,CAEnB,GAAMU,CAAAA,OAAO,CAAGV,CAAC,CAACC,MAAF,CAASC,KAAzB,CACA,GAAIS,CAAAA,MAAM,CAAGxB,WAAW,CAACyB,QAAzB,CAEArB,UAAU,CAACsB,IAAX,CAAgBR,IAAI,CAACS,SAAL,CAAe,CAC3B,UAAWJ,OADgB,CAE3B,SAAUC,MAFiB,CAAf,CAAhB,EAIAb,UAAU,CAAC,EAAD,CAAV,CAAiB;AACpB,CAVD,CAaA;AAGA;AAEA,mBACI,KAAC,QAAD,wBACI,aAAK,SAAS,CAAC,qBAAf,wBACI,YAAK,KAAK,CAAC,+BAAX,uBACI,aAAK,KAAK,CAAC,iBAAX,wBACI,KAAC,OAAD,EAAS,SAAS,CAAC,eAAnB,CAAmC,KAAK,KAAxC,CAAyC,EAAE,CAAC,UAA5C,kBADJ,cAEI,oBAAKX,WAAW,CAAC4B,MAAjB,EAFJ,GADJ,EADJ,cAOI,YAAK,SAAS,CAAC,eAAf,UAEQpB,YAAY,CAACqB,MAAb,GAAwB,CAAxB,CACIrB,YAAY,CAACsB,GAAb,CAAiB,SAACP,OAAD,CAAa,CAC1B,mBACI,sCAEI,YAAK,KAAK,CAAC,MAAX,uBAEQ,aAAK,KAAK,CAAC,WAAX,wBACI,WAAI,KAAK,CAAC,YAAV,UAAwBA,OAAO,CAACC,MAAhC,EADJ,cAEI,UAAG,KAAK,CAAC,WAAT,UAAsBD,OAAO,CAACA,OAA9B,EAFJ,GAFR,EAFJ,EADJ,CAaH,CAdD,CADJ,CAiBI,aAnBZ,EAPJ,cA8BI,YAAK,KAAK,CAAC,2CAAX,uBACI,YAAK,KAAK,CAAC,iBAAX,uBACI,cAAM,MAAM,CAAC,EAAb,CAAgB,QAAQ,CAAE,kBAACV,CAAD,CAAK,CAACS,OAAO,CAACT,CAAD,CAAP,CAAW,CAA3C,wBACA,cAAO,IAAI,CAAC,MAAZ,CAAmB,EAAE,CAAC,qBAAtB,CAA6C,SAAS,CAAC,2BAAvD,EADA,cAEA,UAAG,KAAK,CAAC,yBAAT,CAAmC,IAAI,CAAC,QAAxC,CAAkD,IAAI,CAAC,GAAvD,kBAFA,GADJ,EADJ,EA9BJ,GADJ,EADJ,CA2CH","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useLocation } from 'react-router-dom'\r\nlet count = 1\r\nconsole.log(count)\r\nexport default function ChatUI({ title, onDelete, params }) {\r\n    count++\r\n    console.log(\"Count : \",count)\r\n    // To access props from react routers useLocation hook is used\r\n    const location = useLocation(null)\r\n    console.log(\"PARAMS : \", location.params)\r\n    const [friendGroup, setfriendGroup] = useState(location.params)\r\n    //*************************************************************** */\r\n\r\n    //*******WEB SOCKETS********************************************* */\r\n\r\n\r\n    const roomName = friendGroup.connectionid;\r\n    /****///\r\n\r\n    // class LoadOldMessagesStatus {\r\n    //     static loaded = false\r\n    //     static loadmsgcount = 1\r\n    //     static loadValue() {\r\n    //         return this.loaded;\r\n    //     }\r\n    // }\r\n\r\n    // let sender = friendGroup.username;\r\n\r\n    /**/\r\n    let chatSocket = new WebSocket(\r\n        'ws://'\r\n        + window.location.host\r\n        + '/ws/chat/'\r\n        + roomName\r\n        + '/'\r\n    );\r\n\r\n    \r\n\r\n    const [chatmessages, setchatmessages] = useState([])\r\n\r\n    const [textVal, settextVal] = useState(\"\")\r\n\r\n\r\n    const onChange = (e) => {\r\n        settextVal(e.target.value)\r\n        console.log(e.target.value)\r\n    }\r\n\r\n\r\n    chatSocket.onmessage =  (e)=> {\r\n        const data = JSON.parse(e.data);\r\n        // console.log(data)\r\n        // if(data.messagestamp == 'new' || (data.messagestamp == 'old' && !LoadOldMessagesStatus.loadValue())) {\r\n        setchatmessages((chatmessages)=>[...chatmessages,data])\r\n        // if(data.sender === sender)\r\n        // document.querySelector('#chat-log').value += ('\\t\\t\\t'+data.message+'\\n')\r\n        // else    \r\n        //document.querySelector('#chat-log').value += (data.message + '\\n');\r\n\r\n        // if (data.messagestamp == 'old') {\r\n        //     LoadOldMessagesStatus.loadmsgcount = data.messagecount\r\n        //     if (LoadOldMessagesStatus.loadmsgcount == 1){\r\n        //         LoadOldMessagesStatus.loaded = true;\r\n        //     }\r\n        // }    \r\n\r\n        // }\r\n    };\r\n    console.log(chatmessages)\r\n\r\n    chatSocket.onclose = (e)=> {\r\n        console.error('Chat socket closed unexpectedly');\r\n    };\r\n\r\n    // document.querySelector('#chat-message-input').focus();\r\n    // document.querySelector('#chat-message-input').onkeyup = function(e) {\r\n    //     if (e.keyCode === 13) {  // enter, return\r\n    //         document.querySelector('#chat-message-submit').click();\r\n    //     }\r\n    // };\r\n\r\n    const onClick =  (e)=> {\r\n\r\n        const message = e.target.value;\r\n        let sender = friendGroup.username;\r\n        \r\n        chatSocket.send(JSON.stringify({\r\n            'message': message,\r\n            'sender': sender\r\n        }));\r\n        settextVal(\"\")   // document.querySelector(\"#chat-message-sender\").value = \"\";\r\n    };\r\n\r\n\r\n    //*/*//////////////////////////////////////////////////////////////\r\n\r\n\r\n    //**************************************************************** */\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='container-fluid p-2'>\r\n                <nav class=\"navbar navbar-dark bg-primary\">\r\n                    <div class=\"container-fluid\">\r\n                        <NavLink className=\"btn btn-light\" exact to=\"/friends\">Back</NavLink>\r\n                        <h3>{friendGroup.friend}</h3>\r\n                    </div>\r\n                </nav>\r\n                <div className='overflow-auto'>\r\n                    {\r\n                        chatmessages.length !== 0 ?\r\n                            chatmessages.map((message) => {\r\n                                return (\r\n                                    <>\r\n                                        \r\n                                        <div class=\"card\">\r\n                                            \r\n                                                <div class=\"card-body\">\r\n                                                    <h5 class=\"card-title\">{message.sender}</h5>\r\n                                                    <p class=\"card-text\">{message.message}</p>\r\n                                                </div>\r\n                                                \r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            })\r\n                            :\r\n                            \"No Messages\"\r\n                    }\r\n                    {/* CHAT COMPONENT */}\r\n                </div>\r\n                <nav class=\"navbar fixed-bottom navbar-light bg-light\">\r\n                    <div class=\"container-fluid\">\r\n                        <form action=\"\" onSubmit={(e)=>{onClick(e)}}>\r\n                        <input type=\"text\" id=\"chat-message-submit\"  className='form-control w-50 mx-auto' />\r\n                        <a class=\"btn btn-success mx-auto\" type='submit'  href=\"#\">Send</a>\r\n                        </form>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}