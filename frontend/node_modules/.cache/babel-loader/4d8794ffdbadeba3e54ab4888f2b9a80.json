{"ast":null,"code":"import Cookies from 'js-cookie';\nimport axios from 'axios';\nimport { LOAD_USER_PROFILE_FAIL, LOAD_USER_PROFILE_SUCCESS, UPDATE_USER_PROFILE_FAIL, UPDATE_USER_PROFILE_SUCCESS } from './types'; //To get user data\n\nexport const update_user_profile = (first_name, last_name, phone, city) => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    'withCredentials': true,\n    first_name: first_name,\n    last_name: last_name,\n    phone: phone,\n    city: city\n  });\n\n  try {\n    const res = await axios.put(`${process.env.REACT_APP_API_URL}/profile/update`, body, config);\n\n    if (res.data.profile && res.data.username) {\n      dispatch({\n        type: UPDATE_USER_PROFILE_SUCCESS,\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: UPDATE_USER_PROFILE_FAIL\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_PROFILE_FAIL\n    });\n  }\n}; //To UPDATE USER_PROFILE DATA\n\nexport const load_user = () => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json' // 'X-CSRFToken':Cookies.get('csrftoken') no need when get request is made\n\n    }\n  };\n\n  try {\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/profile/user`, config);\n\n    if (res.data.error) {\n      dispatch({\n        type: LOAD_USER_PROFILE_FAIL\n      });\n    } else {\n      dispatch({\n        type: LOAD_USER_PROFILE_SUCCESS,\n        payload: res.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_PROFILE_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["D:/VSCode/SessionAuth/ChatApp/frontend/src/actions/profile.js"],"names":["Cookies","axios","LOAD_USER_PROFILE_FAIL","LOAD_USER_PROFILE_SUCCESS","UPDATE_USER_PROFILE_FAIL","UPDATE_USER_PROFILE_SUCCESS","update_user_profile","first_name","last_name","phone","city","dispatch","config","headers","get","body","JSON","stringify","res","put","process","env","REACT_APP_API_URL","data","profile","username","type","payload","error","load_user"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,sBAAT,EAAiCC,yBAAjC,EACQC,wBADR,EACiCC,2BADjC,QAEe,SAFf,C,CAGA;;AACC,OAAO,MAAMC,mBAAmB,GAAG,CAAEC,UAAF,EAAcC,SAAd,EAAyBC,KAAzB,EAAgCC,IAAhC,KAAuC,MAAMC,QAAN,IAAkB;AACzF,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAG;AACN,gBAAS,kBADH;AAEN,sBAAe,kBAFT;AAGN,qBAAcb,OAAO,CAACc,GAAR,CAAY,WAAZ;AAHR;AADC,GAAf;AAQA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AACxB,uBAAkB,IADM;AAExBV,IAAAA,UAAU,EAACA,UAFa;AAGxBC,IAAAA,SAAS,EAACA,SAHc;AAIxBC,IAAAA,KAAK,EAACA,KAJkB;AAKxBC,IAAAA,IAAI,EAACA;AALmB,GAAf,CAAb;;AAQA,MAAI;AAEA,UAAMQ,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,iBAA3C,EAA4DP,IAA5D,EAAiEH,MAAjE,CAAlB;;AAEA,QAAGM,GAAG,CAACK,IAAJ,CAASC,OAAT,IAAoBN,GAAG,CAACK,IAAJ,CAASE,QAAhC,EAA0C;AACtCd,MAAAA,QAAQ,CAAC;AACLe,QAAAA,IAAI,EAACrB,2BADA;AAELsB,QAAAA,OAAO,EAACT,GAAG,CAACK;AAFP,OAAD,CAAR;AAIH,KALD,MAMK;AACDZ,MAAAA,QAAQ,CAAC;AACLe,QAAAA,IAAI,EAACtB;AADA,OAAD,CAAR;AAIH;AAEJ,GAjBD,CAiBE,OAAOwB,KAAP,EAAc;AACZjB,IAAAA,QAAQ,CAAC;AACLe,MAAAA,IAAI,EAACtB;AADA,KAAD,CAAR;AAGH;AACJ,CAvCO,C,CAwCR;;AACA,OAAO,MAAMyB,SAAS,GAAG,MAAI,MAAMlB,QAAN,IAAkB;AAC3C,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAG;AACN,gBAAS,kBADH;AAEN,sBAAe,kBAFT,CAGN;;AAHM;AADC,GAAf;;AAQA,MAAI;AAEA,UAAMK,GAAG,GAAG,MAAMjB,KAAK,CAACa,GAAN,CAAW,GAAEM,OAAO,CAACC,GAAR,CAAYC,iBAAkB,eAA3C,EAA0DV,MAA1D,CAAlB;;AAEA,QAAGM,GAAG,CAACK,IAAJ,CAASK,KAAZ,EAAmB;AACfjB,MAAAA,QAAQ,CAAC;AACLe,QAAAA,IAAI,EAACxB;AADA,OAAD,CAAR;AAGH,KAJD,MAKK;AACDS,MAAAA,QAAQ,CAAC;AACLe,QAAAA,IAAI,EAACvB,yBADA;AAELwB,QAAAA,OAAO,EAACT,GAAG,CAACK;AAFP,OAAD,CAAR;AAIH;AAEJ,GAhBD,CAgBE,OAAOK,KAAP,EAAc;AACZjB,IAAAA,QAAQ,CAAC;AACLe,MAAAA,IAAI,EAACxB;AADA,KAAD,CAAR;AAGH;AACJ,CA9BM","sourcesContent":["import Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\n\r\nimport { LOAD_USER_PROFILE_FAIL, LOAD_USER_PROFILE_SUCCESS ,\r\n        UPDATE_USER_PROFILE_FAIL,UPDATE_USER_PROFILE_SUCCESS,\r\n        } from './types'\r\n//To get user data\r\n export const update_user_profile = ( first_name, last_name, phone, city)=>async dispatch => {\r\n    const config = {\r\n        headers : {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n            'X-CSRFToken':Cookies.get('csrftoken') \r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        'withCredentials':true,\r\n        first_name:first_name,\r\n        last_name:last_name, \r\n        phone:phone, \r\n        city:city\r\n    })\r\n\r\n    try {\r\n        \r\n        const res = await axios.put(`${process.env.REACT_APP_API_URL}/profile/update`,body,config)\r\n\r\n        if(res.data.profile && res.data.username) {\r\n            dispatch({\r\n                type:UPDATE_USER_PROFILE_SUCCESS,\r\n                payload:res.data\r\n            })\r\n        }\r\n        else {\r\n            dispatch({\r\n                type:UPDATE_USER_PROFILE_FAIL,\r\n            \r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type:UPDATE_USER_PROFILE_FAIL\r\n        })\r\n    }\r\n}\r\n//To UPDATE USER_PROFILE DATA\r\nexport const load_user = ()=>async dispatch => {\r\n    const config = {\r\n        headers : {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n            // 'X-CSRFToken':Cookies.get('csrftoken') no need when get request is made\r\n        }\r\n    };\r\n\r\n    try {\r\n        \r\n        const res = await axios.get(`${process.env.REACT_APP_API_URL}/profile/user`,config)\r\n\r\n        if(res.data.error) {\r\n            dispatch({\r\n                type:LOAD_USER_PROFILE_FAIL\r\n            })\r\n        }\r\n        else {\r\n            dispatch({\r\n                type:LOAD_USER_PROFILE_SUCCESS,\r\n                payload:res.data\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type:LOAD_USER_PROFILE_FAIL\r\n        })\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}