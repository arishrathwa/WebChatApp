{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCode\\\\SessionAuth\\\\ChatApp\\\\frontend\\\\src\\\\containers\\\\Chat.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport WebSocketInstance from \"../websocket\";\nimport Hoc from \"../hoc/hoc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends React.Component {\n  initialiseChat() {\n    this.waitForSocketConnection(() => {\n      WebSocketInstance.fetchMessages(this.props.username, this.props.match.params.chatID);\n    });\n    WebSocketInstance.connect(this.props.match.params.chatID);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\"\n    };\n\n    this.messageChangeHandler = event => {\n      this.setState({\n        message: event.target.value\n      });\n    };\n\n    this.sendMessageHandler = e => {\n      e.preventDefault();\n      const messageObject = {\n        from: this.props.username,\n        content: this.state.message,\n        chatId: this.props.match.params.chatID\n      };\n      WebSocketInstance.newChatMessage(messageObject);\n      this.setState({\n        message: \"\"\n      });\n    };\n\n    this.renderTimestamp = timestamp => {\n      let prefix = \"\";\n      const timeDiff = Math.round((new Date().getTime() - new Date(timestamp).getTime()) / 60000);\n\n      if (timeDiff < 1) {\n        // less than one minute ago\n        prefix = \"just now...\";\n      } else if (timeDiff < 60 && timeDiff > 1) {\n        // less than sixty minutes ago\n        prefix = `${timeDiff} minutes ago`;\n      } else if (timeDiff < 24 * 60 && timeDiff > 60) {\n        // less than 24 hours ago\n        prefix = `${Math.round(timeDiff / 60)} hours ago`;\n      } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\n        // less than 7 days ago\n        prefix = `${Math.round(timeDiff / (60 * 24))} days ago`;\n      } else {\n        prefix = `${new Date(timestamp)}`;\n      }\n\n      return prefix;\n    };\n\n    this.renderMessages = messages => {\n      const currentUser = this.props.username;\n      return messages.map((message, i, arr) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          marginBottom: arr.length - 1 === i ? \"300px\" : \"15px\"\n        },\n        className: message.author === currentUser ? \"sent\" : \"replies\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://emilcarlsson.se/assets/mikeross.png\",\n          alt: \"profile-pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [message.content, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: this.renderTimestamp(message.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this));\n    };\n\n    this.scrollToBottom = () => {\n      this.messagesEnd.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.initialiseChat();\n  }\n\n  waitForSocketConnection(callback) {\n    const component = this;\n    setTimeout(function () {\n      if (WebSocketInstance.state() === 1) {\n        console.log(\"Connection is made\");\n        callback();\n        return;\n      } else {\n        console.log(\"wait for connection...\");\n        component.waitForSocketConnection(callback);\n      }\n    }, 100);\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (this.props.match.params.chatID !== newProps.match.params.chatID) {\n      WebSocketInstance.disconnect();\n      this.waitForSocketConnection(() => {\n        WebSocketInstance.fetchMessages(this.props.username, newProps.match.params.chatID);\n      });\n      WebSocketInstance.connect(newProps.match.params.chatID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Hoc, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"chat-log\",\n          children: [this.props.messages && this.renderMessages(this.props.messages), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              float: \"left\",\n              clear: \"both\"\n            },\n            ref: el => {\n              this.messagesEnd = el;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.sendMessageHandler,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrap\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: this.messageChangeHandler,\n              value: this.state.message,\n              required: true,\n              id: \"chat-message-input\",\n              type: \"text\",\n              placeholder: \"Write your message...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-paperclip attachment\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"chat-message-submit\",\n              className: \"submit\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-paper-plane\",\n                \"aria-hidden\": \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.auth.username,\n    messages: state.message.messages\n  };\n};\n\nexport default connect(mapStateToProps)(Chat);","map":{"version":3,"sources":["D:/VSCode/SessionAuth/ChatApp/frontend/src/containers/Chat.js"],"names":["React","connect","WebSocketInstance","Hoc","Chat","Component","initialiseChat","waitForSocketConnection","fetchMessages","props","username","match","params","chatID","constructor","state","message","messageChangeHandler","event","setState","target","value","sendMessageHandler","e","preventDefault","messageObject","from","content","chatId","newChatMessage","renderTimestamp","timestamp","prefix","timeDiff","Math","round","Date","getTime","renderMessages","messages","currentUser","map","i","arr","marginBottom","length","author","id","scrollToBottom","messagesEnd","scrollIntoView","behavior","callback","component","setTimeout","console","log","componentDidMount","componentDidUpdate","componentWillReceiveProps","newProps","disconnect","render","float","clear","el","mapStateToProps","auth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,cAA9B;AACA,OAAOC,GAAP,MAAgB,YAAhB;;;AAEA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AAGjCC,EAAAA,cAAc,GAAG;AACf,SAAKC,uBAAL,CAA6B,MAAM;AACjCL,MAAAA,iBAAiB,CAACM,aAAlB,CACE,KAAKC,KAAL,CAAWC,QADb,EAEE,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,MAF1B;AAID,KALD;AAMAX,IAAAA,iBAAiB,CAACD,OAAlB,CAA0B,KAAKQ,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,MAAlD;AACD;;AAEDC,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAZnBM,KAYmB,GAZX;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAYW;;AAAA,SAmBnBC,oBAnBmB,GAmBIC,KAAK,IAAI;AAC9B,WAAKC,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAEE,KAAK,CAACE,MAAN,CAAaC;AAAxB,OAAd;AACD,KArBkB;;AAAA,SAuBnBC,kBAvBmB,GAuBEC,CAAC,IAAI;AACxBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,aAAa,GAAG;AACpBC,QAAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWC,QADG;AAEpBiB,QAAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWC,OAFA;AAGpBY,QAAAA,MAAM,EAAE,KAAKnB,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC;AAHZ,OAAtB;AAKAX,MAAAA,iBAAiB,CAAC2B,cAAlB,CAAiCJ,aAAjC;AACA,WAAKN,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAhCkB;;AAAA,SAkCnBc,eAlCmB,GAkCDC,SAAS,IAAI;AAC7B,UAAIC,MAAM,GAAG,EAAb;AACA,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CACf,CAAC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAID,IAAJ,CAASL,SAAT,EAAoBM,OAApB,EAAxB,IAAyD,KAD1C,CAAjB;;AAGA,UAAIJ,QAAQ,GAAG,CAAf,EAAkB;AAChB;AACAD,QAAAA,MAAM,GAAG,aAAT;AACD,OAHD,MAGO,IAAIC,QAAQ,GAAG,EAAX,IAAiBA,QAAQ,GAAG,CAAhC,EAAmC;AACxC;AACAD,QAAAA,MAAM,GAAI,GAAEC,QAAS,cAArB;AACD,OAHM,MAGA,IAAIA,QAAQ,GAAG,KAAK,EAAhB,IAAsBA,QAAQ,GAAG,EAArC,EAAyC;AAC9C;AACAD,QAAAA,MAAM,GAAI,GAAEE,IAAI,CAACC,KAAL,CAAWF,QAAQ,GAAG,EAAtB,CAA0B,YAAtC;AACD,OAHM,MAGA,IAAIA,QAAQ,GAAG,KAAK,EAAL,GAAU,EAArB,IAA2BA,QAAQ,GAAG,KAAK,EAA/C,EAAmD;AACxD;AACAD,QAAAA,MAAM,GAAI,GAAEE,IAAI,CAACC,KAAL,CAAWF,QAAQ,IAAI,KAAK,EAAT,CAAnB,CAAiC,WAA7C;AACD,OAHM,MAGA;AACLD,QAAAA,MAAM,GAAI,GAAE,IAAII,IAAJ,CAASL,SAAT,CAAoB,EAAhC;AACD;;AACD,aAAOC,MAAP;AACD,KAvDkB;;AAAA,SAyDnBM,cAzDmB,GAyDFC,QAAQ,IAAI;AAC3B,YAAMC,WAAW,GAAG,KAAK/B,KAAL,CAAWC,QAA/B;AACA,aAAO6B,QAAQ,CAACE,GAAT,CAAa,CAACzB,OAAD,EAAU0B,CAAV,EAAaC,GAAb,kBAClB;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAED,GAAG,CAACE,MAAJ,GAAa,CAAb,KAAmBH,CAAnB,GAAuB,OAAvB,GAAiC;AAAjD,SAFT;AAGE,QAAA,SAAS,EAAE1B,OAAO,CAAC8B,MAAR,KAAmBN,WAAnB,GAAiC,MAAjC,GAA0C,SAHvD;AAAA,gCAKE;AACE,UAAA,GAAG,EAAC,4CADN;AAEE,UAAA,GAAG,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA,gBALF,eASE;AAAA,qBACGxB,OAAO,CAACW,OADX,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAQ,KAAKG,eAAL,CAAqBd,OAAO,CAACe,SAA7B;AAAR;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA,SACOf,OAAO,CAAC+B,EADf;AAAA;AAAA;AAAA;AAAA,cADK,CAAP;AAiBD,KA5EkB;;AAAA,SA8EnBC,cA9EmB,GA8EF,MAAM;AACrB,WAAKC,WAAL,CAAiBC,cAAjB,CAAgC;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAhC;AACD,KAhFkB;;AAEjB,SAAK7C,cAAL;AACD;;AAEDC,EAAAA,uBAAuB,CAAC6C,QAAD,EAAW;AAChC,UAAMC,SAAS,GAAG,IAAlB;AACAC,IAAAA,UAAU,CAAC,YAAW;AACpB,UAAIpD,iBAAiB,CAACa,KAAlB,OAA8B,CAAlC,EAAqC;AACnCwC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAJ,QAAAA,QAAQ;AACR;AACD,OAJD,MAIO;AACLG,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAH,QAAAA,SAAS,CAAC9C,uBAAV,CAAkC6C,QAAlC;AACD;AACF,KATS,EASP,GATO,CAAV;AAUD;;AAiEDK,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,cAAL;AACD;;AAEDU,EAAAA,kBAAkB,GAAG;AACnB,SAAKV,cAAL;AACD;;AAEDW,EAAAA,yBAAyB,CAACC,QAAD,EAAW;AAClC,QAAI,KAAKnD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,MAAxB,KAAmC+C,QAAQ,CAACjD,KAAT,CAAeC,MAAf,CAAsBC,MAA7D,EAAqE;AACnEX,MAAAA,iBAAiB,CAAC2D,UAAlB;AACA,WAAKtD,uBAAL,CAA6B,MAAM;AACjCL,QAAAA,iBAAiB,CAACM,aAAlB,CACE,KAAKC,KAAL,CAAWC,QADb,EAEEkD,QAAQ,CAACjD,KAAT,CAAeC,MAAf,CAAsBC,MAFxB;AAID,OALD;AAMAX,MAAAA,iBAAiB,CAACD,OAAlB,CAA0B2D,QAAQ,CAACjD,KAAT,CAAeC,MAAf,CAAsBC,MAAhD;AACD;AACF;;AAEDiD,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,GAAD;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE;AAAI,UAAA,EAAE,EAAC,UAAP;AAAA,qBACG,KAAKrD,KAAL,CAAW8B,QAAX,IAAuB,KAAKD,cAAL,CAAoB,KAAK7B,KAAL,CAAW8B,QAA/B,CAD1B,eAEE;AACE,YAAA,KAAK,EAAE;AAAEwB,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,KAAK,EAAE;AAAxB,aADT;AAEE,YAAA,GAAG,EAAEC,EAAE,IAAI;AACT,mBAAKhB,WAAL,GAAmBgB,EAAnB;AACD;AAJH;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACE;AAAM,UAAA,QAAQ,EAAE,KAAK3C,kBAArB;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,oCACE;AACE,cAAA,QAAQ,EAAE,KAAKL,oBADjB;AAEE,cAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,OAFpB;AAGE,cAAA,QAAQ,MAHV;AAIE,cAAA,EAAE,EAAC,oBAJL;AAKE,cAAA,IAAI,EAAC,MALP;AAME,cAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,oBADF,eASE;AAAG,cAAA,SAAS,EAAC,4BAAb;AAA0C,6BAAY;AAAtD;AAAA;AAAA;AAAA;AAAA,oBATF,eAUE;AAAQ,cAAA,EAAE,EAAC,qBAAX;AAAiC,cAAA,SAAS,EAAC,QAA3C;AAAA,qCACE;AAAG,gBAAA,SAAS,EAAC,mBAAb;AAAiC,+BAAY;AAA7C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiCD;;AAtJgC;;AAyJnC,MAAMkD,eAAe,GAAGnD,KAAK,IAAI;AAC/B,SAAO;AACLL,IAAAA,QAAQ,EAAEK,KAAK,CAACoD,IAAN,CAAWzD,QADhB;AAEL6B,IAAAA,QAAQ,EAAExB,KAAK,CAACC,OAAN,CAAcuB;AAFnB,GAAP;AAID,CALD;;AAOA,eAAetC,OAAO,CAACiE,eAAD,CAAP,CAAyB9D,IAAzB,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport WebSocketInstance from \"../websocket\";\r\nimport Hoc from \"../hoc/hoc\";\r\n\r\nclass Chat extends React.Component {\r\n  state = { message: \"\" };\r\n\r\n  initialiseChat() {\r\n    this.waitForSocketConnection(() => {\r\n      WebSocketInstance.fetchMessages(\r\n        this.props.username,\r\n        this.props.match.params.chatID\r\n      );\r\n    });\r\n    WebSocketInstance.connect(this.props.match.params.chatID);\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialiseChat();\r\n  }\r\n\r\n  waitForSocketConnection(callback) {\r\n    const component = this;\r\n    setTimeout(function() {\r\n      if (WebSocketInstance.state() === 1) {\r\n        console.log(\"Connection is made\");\r\n        callback();\r\n        return;\r\n      } else {\r\n        console.log(\"wait for connection...\");\r\n        component.waitForSocketConnection(callback);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  messageChangeHandler = event => {\r\n    this.setState({ message: event.target.value });\r\n  };\r\n\r\n  sendMessageHandler = e => {\r\n    e.preventDefault();\r\n    const messageObject = {\r\n      from: this.props.username,\r\n      content: this.state.message,\r\n      chatId: this.props.match.params.chatID\r\n    };\r\n    WebSocketInstance.newChatMessage(messageObject);\r\n    this.setState({ message: \"\" });\r\n  };\r\n\r\n  renderTimestamp = timestamp => {\r\n    let prefix = \"\";\r\n    const timeDiff = Math.round(\r\n      (new Date().getTime() - new Date(timestamp).getTime()) / 60000\r\n    );\r\n    if (timeDiff < 1) {\r\n      // less than one minute ago\r\n      prefix = \"just now...\";\r\n    } else if (timeDiff < 60 && timeDiff > 1) {\r\n      // less than sixty minutes ago\r\n      prefix = `${timeDiff} minutes ago`;\r\n    } else if (timeDiff < 24 * 60 && timeDiff > 60) {\r\n      // less than 24 hours ago\r\n      prefix = `${Math.round(timeDiff / 60)} hours ago`;\r\n    } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\r\n      // less than 7 days ago\r\n      prefix = `${Math.round(timeDiff / (60 * 24))} days ago`;\r\n    } else {\r\n      prefix = `${new Date(timestamp)}`;\r\n    }\r\n    return prefix;\r\n  };\r\n\r\n  renderMessages = messages => {\r\n    const currentUser = this.props.username;\r\n    return messages.map((message, i, arr) => (\r\n      <li\r\n        key={message.id}\r\n        style={{ marginBottom: arr.length - 1 === i ? \"300px\" : \"15px\" }}\r\n        className={message.author === currentUser ? \"sent\" : \"replies\"}\r\n      >\r\n        <img\r\n          src=\"http://emilcarlsson.se/assets/mikeross.png\"\r\n          alt=\"profile-pic\"\r\n        />\r\n        <p>\r\n          {message.content}\r\n          <br />\r\n          <small>{this.renderTimestamp(message.timestamp)}</small>\r\n        </p>\r\n      </li>\r\n    ));\r\n  };\r\n\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    if (this.props.match.params.chatID !== newProps.match.params.chatID) {\r\n      WebSocketInstance.disconnect();\r\n      this.waitForSocketConnection(() => {\r\n        WebSocketInstance.fetchMessages(\r\n          this.props.username,\r\n          newProps.match.params.chatID\r\n        );\r\n      });\r\n      WebSocketInstance.connect(newProps.match.params.chatID);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Hoc>\r\n        <div className=\"messages\">\r\n          <ul id=\"chat-log\">\r\n            {this.props.messages && this.renderMessages(this.props.messages)}\r\n            <div\r\n              style={{ float: \"left\", clear: \"both\" }}\r\n              ref={el => {\r\n                this.messagesEnd = el;\r\n              }}\r\n            />\r\n          </ul>\r\n        </div>\r\n        <div className=\"message-input\">\r\n          <form onSubmit={this.sendMessageHandler}>\r\n            <div className=\"wrap\">\r\n              <input\r\n                onChange={this.messageChangeHandler}\r\n                value={this.state.message}\r\n                required\r\n                id=\"chat-message-input\"\r\n                type=\"text\"\r\n                placeholder=\"Write your message...\"\r\n              />\r\n              <i className=\"fa fa-paperclip attachment\" aria-hidden=\"true\" />\r\n              <button id=\"chat-message-submit\" className=\"submit\">\r\n                <i className=\"fa fa-paper-plane\" aria-hidden=\"true\" />\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Hoc>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    username: state.auth.username,\r\n    messages: state.message.messages\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);\r\n"]},"metadata":{},"sourceType":"module"}