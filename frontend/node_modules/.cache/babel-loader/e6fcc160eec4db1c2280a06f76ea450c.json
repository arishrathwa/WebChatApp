{"ast":null,"code":"import _defineProperty from\"D:/VSCode/SessionAuth/ChatApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"D:/VSCode/SessionAuth/ChatApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/VSCode/SessionAuth/ChatApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{GET_NOTIFICATIONS_FAIL,GET_NOTIFICATIONS_SUCCESS,STORE_NOTIFICATIONS_FAIL,STORE_NOTIFICATIONS_SUCCESS}from'./types';import axios from'axios';import Cookies from'js-cookie';//GET FRIEND LIST\nexport var get_notification_list=function get_notification_list(username){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var config,body,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:config={headers:{'Accept':'application/json','Content-Type':'application/json','X-CSRFToken':Cookies.get('csrftoken')}};body=JSON.stringify({'username':username});_context.prev=2;_context.next=5;return axios.post(\"\".concat(process.env.REACT_APP_API_URL,\"/notification/getnotified\"),body,config);case 5:res=_context.sent;console.log(\"Nsot : \",res.data);if(res.data.error){dispatch({type:GET_NOTIFICATIONS_FAIL});}else{dispatch({type:GET_NOTIFICATIONS_SUCCESS,payload:res.data});}_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](2);dispatch({type:GET_NOTIFICATIONS_FAIL});case 13:case\"end\":return _context.stop();}}},_callee,null,[[2,10]]);}));return function(_x){return _ref.apply(this,arguments);};}();};//STORE FRIEND REQUEST\nexport var send_notification=function send_notification(username,receiver,status,info){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var config,body,res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:config={headers:{'Accept':'application/json','Content-Type':'application/json','X-CSRFToken':Cookies.get('csrftoken')}};body=JSON.stringify(_defineProperty({'sender':username,'receiver':receiver,'status':status,// sent ,accept and deny values\n'info':info},\"sender\",username));_context2.prev=2;_context2.next=5;return axios.post(\"\".concat(process.env.REACT_APP_API_URL,\"/notification/notify\"),body,config);case 5:res=_context2.sent;if(res.data.error){dispatch({type:STORE_NOTIFICATIONS_FAIL});}else{dispatch({type:STORE_NOTIFICATIONS_SUCCESS,payload:res.data});}_context2.next=12;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](2);dispatch({type:GET_NOTIFICATIONS_FAIL});case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[2,9]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["D:/VSCode/SessionAuth/ChatApp/frontend/src/actions/notification.js"],"names":["GET_NOTIFICATIONS_FAIL","GET_NOTIFICATIONS_SUCCESS","STORE_NOTIFICATIONS_FAIL","STORE_NOTIFICATIONS_SUCCESS","axios","Cookies","get_notification_list","username","dispatch","config","headers","get","body","JSON","stringify","post","process","env","REACT_APP_API_URL","res","console","log","data","error","type","payload","send_notification","receiver","status","info"],"mappings":"sdAAA,OAAQA,sBAAR,CAA+BC,yBAA/B,CACQC,wBADR,CACiCC,2BADjC,KACmE,SADnE,CAEA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAGA;AACA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAAEC,QAAF,iGAAc,iBAAMC,QAAN,sIAC7CC,MAD6C,CACpC,CACXC,OAAO,CAAG,CACN,SAAS,kBADH,CAEN,eAAe,kBAFT,CAGN,cAAcL,OAAO,CAACM,GAAR,CAAY,WAAZ,CAHR,CADC,CADoC,CAS7CC,IAT6C,CAStCC,IAAI,CAACC,SAAL,CAAe,CACzB,WAAWP,QADc,CAAf,CATsC,uCAe7BH,CAAAA,KAAK,CAACW,IAAN,WAAcC,OAAO,CAACC,GAAR,CAAYC,iBAA1B,8BAAuEN,IAAvE,CAA4EH,MAA5E,CAf6B,QAezCU,GAfyC,eAgB/CC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAsBF,GAAG,CAACG,IAA1B,EACA,GAAGH,GAAG,CAACG,IAAJ,CAASC,KAAZ,CAAmB,CACff,QAAQ,CAAC,CACLgB,IAAI,CAACxB,sBADA,CAAD,CAAR,CAGH,CAJD,IAKK,CACDQ,QAAQ,CAAC,CACLgB,IAAI,CAACvB,yBADA,CAELwB,OAAO,CAACN,GAAG,CAACG,IAFP,CAAD,CAAR,CAKH,CA5B8C,iFA+B/Cd,QAAQ,CAAC,CACLgB,IAAI,CAACxB,sBADA,CAAD,CAAR,CA/B+C,qEAAd,gEAA9B,CAqCP;AACA,MAAO,IAAM0B,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAEnB,QAAF,CAAWoB,QAAX,CAAoBC,MAApB,CAA2BC,IAA3B,kGAAmC,kBAAMrB,QAAN,0IAC9DC,MAD8D,CACrD,CACXC,OAAO,CAAG,CACN,SAAS,kBADH,CAEN,eAAe,kBAFT,CAGN,cAAcL,OAAO,CAACM,GAAR,CAAY,WAAZ,CAHR,CADC,CADqD,CAS9DC,IAT8D,CASvDC,IAAI,CAACC,SAAL,kBACV,SAASP,QADC,CAEV,WAAWoB,QAFD,CAGT,SAASC,MAHA,CAGQ;AACjB,OAAOC,IAJE,WAKAtB,QALA,EATuD,yCAoB9CH,CAAAA,KAAK,CAACW,IAAN,WAAcC,OAAO,CAACC,GAAR,CAAYC,iBAA1B,yBAAkEN,IAAlE,CAAuEH,MAAvE,CApB8C,QAoB1DU,GApB0D,gBAsBhE,GAAGA,GAAG,CAACG,IAAJ,CAASC,KAAZ,CAAmB,CACff,QAAQ,CAAC,CACLgB,IAAI,CAACtB,wBADA,CAAD,CAAR,CAGH,CAJD,IAKK,CACDM,QAAQ,CAAC,CACLgB,IAAI,CAACrB,2BADA,CAELsB,OAAO,CAACN,GAAG,CAACG,IAFP,CAAD,CAAR,CAIH,CAhC+D,mFAmChEd,QAAQ,CAAC,CACLgB,IAAI,CAACxB,sBADA,CAAD,CAAR,CAnCgE,sEAAnC,kEAA1B","sourcesContent":["import {GET_NOTIFICATIONS_FAIL,GET_NOTIFICATIONS_SUCCESS,\r\n        STORE_NOTIFICATIONS_FAIL,STORE_NOTIFICATIONS_SUCCESS} from './types'\r\nimport axios from 'axios'\r\n\r\nimport Cookies from 'js-cookie';\r\n\r\n\r\n//GET FRIEND LIST\r\nexport const get_notification_list = ( username )=>async dispatch => {\r\nconst config = {\r\n    headers : {\r\n        'Accept':'application/json',\r\n        'Content-Type':'application/json',\r\n        'X-CSRFToken':Cookies.get('csrftoken') \r\n    }\r\n};\r\n\r\nconst body = JSON.stringify({\r\n   'username':username,\r\n})\r\n\r\ntry {\r\n        \r\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/notification/getnotified`,body,config)\r\n    console.log(\"Nsot : \",res.data)\r\n    if(res.data.error) {\r\n        dispatch({\r\n            type:GET_NOTIFICATIONS_FAIL,\r\n        })\r\n    }\r\n    else {\r\n        dispatch({\r\n            type:GET_NOTIFICATIONS_SUCCESS,\r\n            payload:res.data\r\n        \r\n        })\r\n    }\r\n\r\n} catch (error) {\r\n    dispatch({\r\n        type:GET_NOTIFICATIONS_FAIL\r\n    })\r\n}\r\n}\r\n\r\n//STORE FRIEND REQUEST\r\nexport const send_notification = ( username,receiver,status,info )=>async dispatch => {\r\nconst config = {\r\n    headers : {\r\n        'Accept':'application/json',\r\n        'Content-Type':'application/json',\r\n        'X-CSRFToken':Cookies.get('csrftoken') \r\n    }\r\n};\r\n\r\nconst body = JSON.stringify({\r\n   'sender':username,\r\n   'receiver':receiver,\r\n    'status':status, // sent ,accept and deny values\r\n    'info':info,\r\n    \"sender\":username\r\n\r\n})\r\n\r\ntry {\r\n    \r\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/notification/notify`,body,config)\r\n\r\n    if(res.data.error) {\r\n        dispatch({\r\n            type:STORE_NOTIFICATIONS_FAIL,\r\n        })\r\n    }\r\n    else {\r\n        dispatch({\r\n            type:STORE_NOTIFICATIONS_SUCCESS,\r\n            payload:res.data\r\n        })\r\n    }\r\n\r\n} catch (error) {\r\n    dispatch({\r\n        type:GET_NOTIFICATIONS_FAIL\r\n    })\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}