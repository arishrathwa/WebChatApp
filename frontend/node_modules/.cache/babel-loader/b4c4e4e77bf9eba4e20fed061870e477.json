{"ast":null,"code":"import _regeneratorRuntime from\"D:/VSCode/SessionAuth/ChatApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/VSCode/SessionAuth/ChatApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Cookies from'js-cookie';import axios from'axios';import{LOAD_USER_PROFILE_FAIL,LOAD_USER_PROFILE_SUCCESS}from'./types';export var load_user=function load_user(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var config,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:config={headers:{'Accept':'application/json','Content-Type':'application/json'// 'X-CSRFToken':Cookies.get('csrftoken') no need when get request is made\n}};_context.prev=1;_context.next=4;return axios.get(\"\".concat(process.env.REACT_APP_API_URL,\"/profile/user\"),config);case 4:res=_context.sent;if(res.data.error){dispatch({type:LOAD_USER_PROFILE_FAIL});}else{dispatch({type:LOAD_USER_PROFILE_SUCCESS,payload:res.data});}_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);dispatch({type:LOAD_USER_PROFILE_FAIL});case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["D:/VSCode/SessionAuth/ChatApp/frontend/src/actions/profile.js"],"names":["Cookies","axios","LOAD_USER_PROFILE_FAIL","LOAD_USER_PROFILE_SUCCESS","load_user","dispatch","config","headers","get","process","env","REACT_APP_API_URL","res","data","error","type","payload"],"mappings":"uTAAA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,sBAAT,CAAiCC,yBAAjC,KAAkE,SAAlE,CACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,kGAAI,iBAAMC,QAAN,iIACnBC,MADmB,CACV,CACXC,OAAO,CAAG,CACN,SAAS,kBADH,CAEN,eAAe,kBACf;AAHM,CADC,CADU,uCAWHN,CAAAA,KAAK,CAACO,GAAN,WAAaC,OAAO,CAACC,GAAR,CAAYC,iBAAzB,kBAA0DL,MAA1D,CAXG,QAWfM,GAXe,eAarB,GAAGA,GAAG,CAACC,IAAJ,CAASC,KAAZ,CAAmB,CACfT,QAAQ,CAAC,CACLU,IAAI,CAACb,sBADA,CAAD,CAAR,CAGH,CAJD,IAKK,CACDG,QAAQ,CAAC,CACLU,IAAI,CAACZ,yBADA,CAELa,OAAO,CAACJ,GAAG,CAACC,IAFP,CAAD,CAAR,CAIH,CAvBoB,+EA0BrBR,QAAQ,CAAC,CACLU,IAAI,CAACb,sBADA,CAAD,CAAR,CA1BqB,oEAAJ,gEAAlB","sourcesContent":["import Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\n\r\nimport { LOAD_USER_PROFILE_FAIL, LOAD_USER_PROFILE_SUCCESS } from './types'\r\nexport const load_user = ()=>async dispatch => {\r\n    const config = {\r\n        headers : {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n            // 'X-CSRFToken':Cookies.get('csrftoken') no need when get request is made\r\n        }\r\n    };\r\n\r\n    try {\r\n        \r\n        const res = await axios.get(`${process.env.REACT_APP_API_URL}/profile/user`,config)\r\n\r\n        if(res.data.error) {\r\n            dispatch({\r\n                type:LOAD_USER_PROFILE_FAIL\r\n            })\r\n        }\r\n        else {\r\n            dispatch({\r\n                type:LOAD_USER_PROFILE_SUCCESS,\r\n                payload:res.data\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type:LOAD_USER_PROFILE_FAIL\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}