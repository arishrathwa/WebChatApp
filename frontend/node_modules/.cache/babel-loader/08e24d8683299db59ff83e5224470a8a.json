{"ast":null,"code":"import axios from 'axios'; //For making API requests and handle responses like fetch api\n\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_FAIL, LOGOUT_SUCCESS, AUTHENTICATED_FAIL, AUTHENTICATED_SUCCESS, DELETE_USER_FAIL, DELETE_USER_SUCCESS } from '../actions/types';\nimport Cookies from 'js-cookie';\nimport { load_user } from './profile'; //CHECK AUTHENTICATED OR NOT\n\nexport const checkAuthenticated = () => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': `${Cookies.get('csrftoken')}` //no need of for get request getting auth status\n\n    }\n  };\n  const body = JSON.stringify({});\n\n  try {\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/accounts/authenticated`, body, config);\n\n    if (res.data.error || res.data.isAuthenticated === 'error') {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n        payload: false\n      });\n    } else if (res.data.isAuthenticated === 'success') {\n      dispatch({\n        type: AUTHENTICATED_SUCCESS,\n        payload: true\n      });\n    } else {\n      // it will act when user accessing view without authentication cookies\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: AUTHENTICATED_FAIL,\n      payload: false\n    });\n  }\n}; //LOGIN\n\nexport const login = (username, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/login`, body, config);\n\n    if (res.data.error) {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    } else {\n      dispatch({\n        type: LOGIN_SUCCESS // payload:res.data.username as profile is getting fetched after this\n\n      }); //load the user action dispatch after this\n\n      dispatch(load_user());\n    }\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //REGISTER\n\nexport const register = (username, password, re_password) => async dispatch => {\n  console.log(Cookies.get('csrftoken'));\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': `${Cookies.get('csrftoken')}`\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/register`, body, config);\n\n    if (res.data.error) {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //LOGOUT\n\nexport const logout = () => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': `${Cookies.get('csrftoken')}`\n    }\n  };\n  const body = JSON.stringify({\n    'withCredentials': true\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/logout`, body, config);\n\n    if (res.data.error) {\n      dispatch({\n        type: LOGOUT_FAIL\n      });\n    } else {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      }); //load the user action dispatch after this\n    }\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL\n    });\n  }\n}; //DELETE USER\n\nexport const delete_account = () => async dispatch => {\n  console.log(\"Arrived\");\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': `${Cookies.get('csrftoken')}`\n    }\n  };\n  console.log(Cookies.get('csrftoken'));\n  const body = JSON.stringify({\n    'withCredentials': true\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/delete`, body, config);\n\n    if (res.data.success) {\n      dispatch({\n        type: DELETE_USER_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: DELETE_USER_FAIL\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: DELETE_USER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["D:/VSCode/SessionAuth/ChatApp/frontend/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT_FAIL","LOGOUT_SUCCESS","AUTHENTICATED_FAIL","AUTHENTICATED_SUCCESS","DELETE_USER_FAIL","DELETE_USER_SUCCESS","Cookies","load_user","checkAuthenticated","dispatch","config","headers","get","body","JSON","stringify","res","process","env","REACT_APP_API_URL","data","error","isAuthenticated","type","payload","login","username","password","post","register","re_password","console","log","err","logout","delete_account","success"],"mappings":"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","sourcesContent":["import axios from 'axios' //For making API requests and handle responses like fetch api\r\nimport { REGISTER_SUCCESS,REGISTER_FAIL,\r\n            LOGIN_FAIL,LOGIN_SUCCESS,\r\n            LOGOUT_FAIL,LOGOUT_SUCCESS,\r\n            AUTHENTICATED_FAIL,AUTHENTICATED_SUCCESS,\r\n            DELETE_USER_FAIL,DELETE_USER_SUCCESS } from '../actions/types'\r\n\r\nimport Cookies from 'js-cookie'\r\n\r\nimport { load_user } from './profile'\r\n//CHECK AUTHENTICATED OR NOT\r\nexport const checkAuthenticated = () => async dispatch => {\r\n    const config = {\r\n        headers : {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n             'X-CSRFToken':`${Cookies.get('csrftoken')}`  //no need of for get request getting auth status\r\n        }\r\n    };\r\n    \r\n    const body = JSON.stringify({\r\n        \r\n    })\r\n\r\n    try {\r\n        \r\n        const res = await axios.get(`${process.env.REACT_APP_API_URL}/accounts/authenticated`,body,config)\r\n\r\n       if(res.data.error || res.data.isAuthenticated === 'error') {\r\n           dispatch({\r\n               type:AUTHENTICATED_FAIL,\r\n               payload:false\r\n           })\r\n       }\r\n       else if(res.data.isAuthenticated === 'success'){\r\n           dispatch({\r\n               type:AUTHENTICATED_SUCCESS,\r\n               payload:true\r\n           })\r\n       }\r\n       else { // it will act when user accessing view without authentication cookies\r\n        dispatch({\r\n            type:AUTHENTICATED_FAIL,\r\n            payload:false\r\n        })\r\n       }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type:AUTHENTICATED_FAIL,\r\n            payload:false\r\n        })\r\n    }\r\n\r\n}\r\n\r\n//LOGIN\r\n\r\nexport const login = (username,password) => async dispatch => {\r\n    const config = {\r\n        headers : {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n            'X-CSRFToken':Cookies.get('csrftoken')\r\n        }\r\n    };\r\n    \r\n    const body = JSON.stringify({username,password})\r\n\r\n    try {\r\n        \r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/login`,body,config)\r\n\r\n        if(res.data.error) {\r\n            dispatch({\r\n                type:LOGIN_FAIL\r\n            })\r\n        }\r\n        else {\r\n            dispatch({\r\n                type:LOGIN_SUCCESS,\r\n                // payload:res.data.username as profile is getting fetched after this\r\n            });\r\n            \r\n            //load the user action dispatch after this\r\n            dispatch(load_user())\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type:LOGIN_FAIL\r\n        })\r\n    }\r\n\r\n}\r\n//REGISTER\r\nexport const register = (username,password,re_password) => async dispatch => {\r\n    console.log(Cookies.get('csrftoken'))\r\n    const config = {\r\n        headers : {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n            'X-CSRFToken':`${Cookies.get('csrftoken')}`\r\n        }\r\n    };\r\n    const body = JSON.stringify({username,password,re_password})\r\n\r\n    try {\r\n\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/register`,body,config);\r\n\r\n        if(res.data.error) {\r\n            dispatch({\r\n                type:REGISTER_FAIL\r\n            });\r\n        }else {\r\n            dispatch({\r\n                type:REGISTER_SUCCESS\r\n            });\r\n        }\r\n\r\n    }catch(err){\r\n        dispatch({\r\n            type:REGISTER_FAIL\r\n        });\r\n    }\r\n\r\n} \r\n\r\n//LOGOUT\r\nexport const logout = () => async dispatch => {\r\n    const config = {\r\n        headers : {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n            'X-CSRFToken':`${Cookies.get('csrftoken')}`\r\n        }\r\n    };\r\n    \r\n    const body = JSON.stringify({\r\n        'withCredentials':true\r\n    })\r\n\r\n    try {\r\n        \r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/logout`,body,config)\r\n\r\n        if(res.data.error) {\r\n            dispatch({\r\n                type:LOGOUT_FAIL\r\n            })\r\n        }\r\n        else {\r\n            dispatch({\r\n                type:LOGOUT_SUCCESS,\r\n            });\r\n            \r\n            //load the user action dispatch after this\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type:LOGOUT_FAIL\r\n        })\r\n    }\r\n\r\n}\r\n\r\n//DELETE USER\r\nexport const delete_account = () => async dispatch => {\r\n    console.log(\"Arrived\")\r\n    const config = {\r\n        headers : {\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json',\r\n            'X-CSRFToken':`${Cookies.get('csrftoken')}`\r\n        }\r\n    };\r\n    console.log(Cookies.get('csrftoken'))\r\n    const body = JSON.stringify({\r\n        'withCredentials':true\r\n    })\r\n    \r\n    try {\r\n\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/delete`,body,config)\r\n        \r\n        if( res.data.success ){\r\n            dispatch({\r\n                type:DELETE_USER_SUCCESS,\r\n            })\r\n        }\r\n        else {\r\n            dispatch({\r\n                type:DELETE_USER_FAIL\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type:DELETE_USER_FAIL\r\n        })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}